// ======================================================================================
// ARQUIVO: UserRepository.cs
// CAMADA: Infrastructure / Persistence / Repositories
// OBJETIVO: Implementa o reposit√≥rio da entidade User, com suporte a multi-tenant por
//            schema e valida√ß√£o de usu√°rios ativos (sem TenantId expl√≠cito).
// ======================================================================================

using Chronosystem.Application.Common.Interfaces.Persistence;
using Chronosystem.Domain.Entities;
using Chronosystem.Infrastructure.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Chronosystem.Infrastructure.Persistence.Repositories;

/// <summary>
/// Implementa√ß√£o do reposit√≥rio de usu√°rios respons√°vel por executar opera√ß√µes
/// de leitura e escrita dentro do schema ativo (multi-tenant).
/// </summary>
/// <remarks>
/// Todas as consultas e comandos s√£o automaticamente aplicados ao schema do tenant atual,
/// definido pelo middleware <c>X-Tenant</c> via <c>ApplicationDbContext</c>.
/// </remarks>
public class UserRepository : IUserRepository
{
    private readonly ApplicationDbContext _dbContext;

    /// <summary>
    /// Inicializa uma nova inst√¢ncia do reposit√≥rio de usu√°rios.
    /// </summary>
    /// <param name="dbContext">Contexto de banco de dados configurado com o schema do tenant atual.</param>
    public UserRepository(ApplicationDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    // -------------------------------------------------------------------------
    // üß± CRUD B√ÅSICO
    // -------------------------------------------------------------------------

    /// <summary>
    /// Adiciona um novo usu√°rio ao contexto atual.
    /// </summary>
    /// <param name="user">Entidade <see cref="User"/> a ser adicionada.</param>
    public async Task AddAsync(User user) =>
        await _dbContext.Users.AddAsync(user);

    /// <summary>
    /// Retorna todos os usu√°rios ativos (n√£o deletados) do schema atual.
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o.</param>
    /// <returns>Cole√ß√£o de entidades <see cref="User"/>.</returns>
    public async Task<IEnumerable<User>> GetAllAsync(CancellationToken cancellationToken = default) =>
        await _dbContext.Users
            .AsNoTracking()
            .Where(u => u.DeletedAt == null)
            .OrderBy(u => u.FullName)
            .ToListAsync(cancellationToken);

    /// <summary>
    /// Busca um usu√°rio espec√≠fico pelo seu identificador √∫nico.
    /// </summary>
    /// <param name="userId">Identificador do usu√°rio.</param>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o.</param>
    /// <returns>
    /// A entidade <see cref="User"/> correspondente, ou <c>null</c> se n√£o for encontrada.
    /// </returns>
    public async Task<User?> GetByIdAsync(Guid userId, CancellationToken cancellationToken = default) =>
        await _dbContext.Users
            .AsNoTracking()
            .FirstOrDefaultAsync(u => u.Id == userId && u.DeletedAt == null, cancellationToken);

    /// <summary>
    /// Busca um usu√°rio pelo endere√ßo de e-mail (case insensitive).
    /// </summary>
    /// <param name="email">Endere√ßo de e-mail do usu√°rio.</param>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o.</param>
    /// <returns>
    /// A entidade <see cref="User"/> correspondente, ou <c>null</c> se n√£o for encontrada.
    /// </returns>
    public async Task<User?> GetUserByEmailAsync(string email, CancellationToken cancellationToken = default)
    {
        var normalized = (email ?? string.Empty).Trim().ToLowerInvariant();

        return await _dbContext.Users
            .AsNoTracking()
            .FirstOrDefaultAsync(u =>
                u.Email == normalized &&
                u.DeletedAt == null, cancellationToken);
    }

    /// <summary>
    /// Verifica se j√° existe um usu√°rio ativo com o e-mail informado.
    /// </summary>
    /// <param name="email">Endere√ßo de e-mail a verificar.</param>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o.</param>
    /// <returns><c>true</c> se o e-mail j√° estiver em uso; caso contr√°rio, <c>false</c>.</returns>
    public async Task<bool> UserExistsByEmailAsync(string email, CancellationToken cancellationToken = default)
    {
        var normalized = (email ?? string.Empty).Trim().ToLowerInvariant();

        return await _dbContext.Users
            .AsNoTracking()
            .AnyAsync(u =>
                u.Email == normalized &&
                u.DeletedAt == null, cancellationToken);
    }

    // -------------------------------------------------------------------------
    // üß≠ PERSIST√äNCIA
    // -------------------------------------------------------------------------

    /// <summary>
    /// Atualiza o estado da entidade <see cref="User"/> dentro do contexto atual.
    /// </summary>
    /// <param name="user">Entidade a ser atualizada.</param>
    public void Update(User user) =>
        _dbContext.Users.Update(user);

    /// <summary>
    /// Remove permanentemente a entidade <see cref="User"/> do contexto.
    /// ‚ö†Ô∏è Use apenas em opera√ß√µes administrativas ‚Äî o padr√£o √© soft delete.
    /// </summary>
    /// <param name="user">Entidade a ser removida.</param>
    public void Remove(User user) =>
        _dbContext.Users.Remove(user);

    /// <summary>
    /// Persiste todas as altera√ß√µes pendentes no contexto de banco de dados.
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o.</param>
    /// <returns>N√∫mero de registros afetados.</returns>
    public Task<int> SaveChangesAsync(CancellationToken cancellationToken = default) =>
        _dbContext.SaveChangesAsync(cancellationToken);

    // -------------------------------------------------------------------------
    // üß© UTILIT√ÅRIOS
    // -------------------------------------------------------------------------

    /// <summary>
    /// Verifica se o usu√°rio existe, est√° ativo e n√£o foi logicamente deletado.
    /// </summary>
    /// <param name="userId">Identificador do usu√°rio a ser verificado.</param>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o.</param>
    /// <returns>
    /// <c>true</c> se o usu√°rio existir e estiver ativo; caso contr√°rio, <c>false</c>.
    /// </returns>
    public async Task<bool> ExistsAndIsActiveAsync(Guid userId, CancellationToken cancellationToken = default) =>
        await _dbContext.Users
            .AsNoTracking()
            .AnyAsync(u =>
                u.Id == userId &&
                u.IsActive &&
                u.DeletedAt == null, cancellationToken);
}
